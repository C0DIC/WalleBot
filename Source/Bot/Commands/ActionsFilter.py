from aiogram import types
from ..Bot import walle
from ...Utils.GetFirstWordOfText import getFirstWord
from ...Utils.ReturnNoneReservesFunc import returnNoneReserved
from ...Utils.removeUnderlineSymbol import removeUnderline
from ..Strings.RU.Commands.ActionsList import actions_m, actions_f, actions


async def actions_filter(msg: types.Message):
    try:
        action = removeUnderline(getFirstWord(msg.text.lower()))
        sndr = msg.from_user
        
        try:
            action_args = await msg.get_args().split(' ')[1::]
        except AttributeError:
            pass

        for i in action_args:
            action_addition += ' ' + action_args[i]


        if action in actions:
            target = msg.reply_to_message.from_user

            if action in actions[0]:
                await msg.answer(
                '[{}]({}) *—Ö—Ä—é–∫–Ω—É–ª\(\-–∞\) –Ω–∞* [{}]({})*{}* \| üêΩ'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )
            if action in actions[1]:
                await msg.answer(
                '[{}]({}) *—É–∫—É—Å–∏–ª\(\-–∞\)* [{}]({})*{}* \| üòº'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )
            if action in actions[2]:
                await msg.answer(
                '[{}]({}) *–¥–∞–ª\(\-–∞\) —à–æ–∫–æ–ª–∞–¥–∫—É* [{}]({})*{}* \| üç´'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )
            if action in actions[3]:
                await msg.answer(
                '[{}]({}) *–ø–æ—Å–ª–∞–ª\(\-–∞\)* [{}]({}) *—Å–ø–∞—Ç—å*,*{}* \| üõè'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )
            if action in actions[4]:
                await msg.answer(
                '[{}]({}) *–æ—Å—Ç–∞–≤–∏–ª\(\-–∞\) –∑–∞—Å–æ—Å –Ω–∞* [{}]({})*{}* \| üíã'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )
            if action in actions[5]:
                await msg.answer(
                '[{}]({}) *–∑–∞–Ω—è–ª—Å—è\(\-–ª–∞—Å—å\) —Å–µ–∫—Å–æ–º —Å* [{}]({})*{}* \| üëâüèªüëåüèª'.format(returnNoneReserved(sndr.first_name), sndr.url, returnNoneReserved(target.first_name), target.url, action_addition),
                    parse_mode = 'MarkdownV2'
                )

        if action in actions_m or action in actions_f:
            target = msg.reply_to_message.from_user

            await msg.answer(
                '[{}]({}) *{}* [{}]({})*{}* \| üí¨'.format(
                    returnNoneReserved(sndr.first_name),
                    sndr.url,
                    returnNoneReserved(action),
                    returnNoneReserved(target.first_name),
                    target.url,
                    action_addition
                ),
                parse_mode = 'MarkdownV2'
            )
    except Exception as e:
        print(e)